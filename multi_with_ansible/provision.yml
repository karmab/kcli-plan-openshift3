- name: Deploy Infrastructure with kcli
  hosts: localhost
  vars:
    plan: deploy_openshift
  tasks:
    - import_role:
        name: karmab.kcli-modules
    - name: Deploy plan
      kvirt_plan: 
        name: "{{ plan }}"
        state: present
        inputfile: kcli_plan.yml
      register: result
    - name: Get ip from vm
      kvirt_info:
        name: "{{ item }}"
      register: r
      until: r.meta.ip is defined
      retries: 60
      delay: 10
      changed_when: false
      with_items: "{{ result.meta.vms }}"
    - name: Add new instances to host group
      add_host:
        name: "{{ item.item }}"
        ansible_ssh_host: "{{ item.meta.ip }}"
        groupname: newvms
      with_items: "{{ r.results }}"
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.meta.ip }}"
        port: 22
        delay: 5
        timeout: 600
        state: started
      with_items: "{{ r.results }}"
- name: Run prep steps
  hosts: newvms
  user: cloud-user
  become: True
  tasks:
    - name: Check if prep_done is already there
      stat:
        path: /root/.prep_done
      register: prep_done
    - name: Register all the nodes
      rhsm_repository:
        name: "{{ item }}"
      with_items:
        - rhel-7-server-extras-rpms
        - rhel-7-server-ose-3.11-rpms
        - rhel-7-server-ansible-2.6-rpms
      when: not prep_done.stat.exists
    - name: Install dependencies
      yum:
        name: ['NetworkManager', 'docker', 'wget', 'nc']
        state: present
      when: not prep_done.stat.exists
    - name: Enable NetworkManager and ensure it is started
      systemd:
        name: NetworkManager
        state: started
        enabled: yes
      when: not prep_done.stat.exists
    - name: Update all the nodes
      yum:
        name: '*'
        state: latest
      when: not prep_done.stat.exists
    - name: Create prep_done file
      copy:
       content: ""
       dest: /root/.prep_done
      when: not prep_done.stat.exists
    - name: Reboot
      reboot:
        test_command: "test -f /root/.prep_done"
      when: not prep_done.stat.exists
- name: Deploy Openshift
  hosts: m01
  user: cloud-user
  become: True
  tasks:
    - name: Check if openshift_done is already there
      stat:
        path: /root/.openshift_done
      register: openshift_done
    - name: Install openshift ansible
      yum:
        name: ['openshift-ansible']
        state: present
      when: not openshift_done.stat.exists
    - name: Enable ansible logging
      lineinfile:
        path: /etc/ansible/ansible.cfg
        insertafter: '#log_path'
        regexp: '^log_path'
        line: 'log_path = /var/log/ansible.log'
      when: not openshift_done.stat.exists
    - name: Disable host key checking
      lineinfile:
        path: /etc/ansible/ansible.cfg
        insertafter: '#host_key_checking'
        regexp: '^host_key_checking'
        line: 'host_key_checking = False'
      when: not openshift_done.stat.exists
    - name: Change subdomain app
      lineinfile:
        path: /root/inventory
        insertafter: '#openshift_master_default_subdomain'
        regexp: '^openshift_master_default_subdomain'
        line: "openshift_master_default_subdomain=app.{{ hostvars['i01']['ansible_eth0']['ipv4']['address'] }}.xip.io"
      when: not openshift_done.stat.exists
    - name: Deploy openshift prerequisites
      command: /bin/bash -c 'ansible-playbook -i /root/inventory /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml'
      when: not openshift_done.stat.exists
    - name: Deploy openshift cluster
      command: /bin/bash -c 'ansible-playbook -i /root/inventory /usr/share/ansible/openshift-ansible/playbooks/deploy_cluster.yml'
      when: not openshift_done.stat.exists
    - name: Create openshift_done file
      copy:
       content: ""
       dest: /root/.openshift_done
      when: not openshift_done.stat.exists
